/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.18
 * Generated at: 2024-02-18 11:14:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.user;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-latest.min.js\"></script>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <title>Insert title here</title>\r\n");
      out.write("  <style>\r\n");
      out.write("      .loginBox{\r\n");
      out.write("          margin: auto;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .btnGroup > .btn-login {\r\n");
      out.write("          background-color : oklch(0.4912 0.3096 275.75) !important;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .btnGroup > .btn-login:hover {\r\n");
      out.write("          background-color : oklab(0.44208 0.0279164 -0.277238) !important;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .btnGroup > .btn-cancel {\r\n");
      out.write("          background-color : oklch(0.6971 0.329 342.55) !important;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .btnGroup > .btn-cancel:hover {\r\n");
      out.write("          background-color : oklab(0.62739 0.282473 -0.0887925) !important;\r\n");
      out.write("      }\r\n");
      out.write("      .body{\r\n");
      out.write("          display: flex;\r\n");
      out.write("          flex-direction: column;\r\n");
      out.write("      }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("      <div class=\"loginBox flex flex-col w-[500px] h-[300px] p-[20px]\">\r\n");
      out.write("        <div class=\"head\">\r\n");
      out.write("          <div class=\"loginTitle text-center text-[2rem] font-bold\">\r\n");
      out.write("            로그인\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"body flex items-center justify-center flex-grow\">\r\n");
      out.write("            <div class=\"inputBox flex flex-col items-center gap-y-3\">\r\n");
      out.write("              <input placeholder=\"아이디\" id=\"id\" name=\"id\" type=\"text\" class=\"input input-bordered w-full\" />\r\n");
      out.write("              <input placeholder=\"비밀번호\" id=\"pw\" name=\"pw\" type=\"password\" class=\"input input-bordered w-full\" />\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"btnGroup flex justify-center gap-x-3 mt-[5px]\">\r\n");
      out.write("              <button type=\"button\" id=\"login\" class=\"btn btn-primary btn-login !text-[15px]\">로그인</button>\r\n");
      out.write("              <button type=\"button\" class=\"btn btn-secondary btn-cancel !text-[15px]\">\r\n");
      out.write("                <a href=\"main.do\">취소</a>\r\n");
      out.write("              </button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<script>\r\n");
      out.write("  $(\"#login\").click(function() {\r\n");
      out.write("    let query = {\r\n");
      out.write("      id: $(\"#id\").val(),\r\n");
      out.write("      pw: $(\"#pw\").val()\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      type: \"POST\",\r\n");
      out.write("      url: \"loginCheck.do\",\r\n");
      out.write("      data: query,\r\n");
      out.write("      success: function(data) {\r\n");
      out.write("        if ($(\"#id\").val().trim().length === 0) {\r\n");
      out.write("          alert(\"id 값을 입력해주세요\");\r\n");
      out.write("          $(\"#id\").focus();\r\n");
      out.write("          $(\"#id\").css(\"border\", \"\");\r\n");
      out.write("          return;\r\n");
      out.write("        }\r\n");
      out.write("        if ($(\"#pw\").val().trim().length === 0) {\r\n");
      out.write("          alert(\"pw 값을 입력해주세요\");\r\n");
      out.write("          $(\"#pw\").focus();\r\n");
      out.write("          $(\"#pw\").css(\"border\", \"\");\r\n");
      out.write("          return;\r\n");
      out.write("        }\r\n");
      out.write("        if (data!=0) {\r\n");
      out.write("          alert(\"로그인 성공\");\r\n");
      out.write("          window.location.href = \"main.do\";\r\n");
      out.write("        } else {\r\n");
      out.write("          alert(\"아이디와 패스워드를 확인해주세요.\");\r\n");
      out.write("          $(\"#id\").val(\"\");\r\n");
      out.write("          $(\"#pw\").val(\"\");\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
